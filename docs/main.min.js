"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var classes = {
  dataId: 'data-id',
  dataNotChecked: '[data-id]:not(.checked)',
  left: '.left',
  todoRemove: '.todo-remove',
  todoDescription: '.todo-description',
  todoTitle: '.todo-title',
  more: 'more',
  checked: 'checked',
  unchecked: 'unchecked',
  form: 'form',
  novalid: 'novalid',
  taskName: 'taskName',
  taskDescription: 'taskDescription',
  taskList: 'taskList',
  taskForm: 'taskForm'
};

var PersonForm =
/*#__PURE__*/
function () {
  function PersonForm(options) {
    _classCallCheck(this, PersonForm);

    this.formName = options;
  }

  _createClass(PersonForm, [{
    key: "init",
    value: function init() {
      this.renerToDoList();
      this.submitForm();
    }
  }, {
    key: "localStorageLengthSort",
    value: function localStorageLengthSort(type) {
      var array = [];

      for (var i = 0; i < localStorage.length; i++) {
        array.push(localStorage.key(i));
      }

      array = type === 'sort' ? array.sort(function (a, b) {
        return a - b;
      }) : array.length > 0 ? Math.max.apply(Math, _toConsumableArray(array)) : 0;
      return array;
    }
  }, {
    key: "countCheckItems",
    value: function countCheckItems() {
      var dataId = document.querySelectorAll("[".concat(classes.dataId, "]"));
      var left = document.querySelector(classes.left);

      for (var i = 0; i < dataId.length; i++) {
        dataId[i].addEventListener('click', function () {
          var countChecked = document.querySelectorAll(classes.dataNotChecked).length;

          if (countChecked > 0) {
            left.style.visibility = 'visible';
            left.innerHTML = "".concat(countChecked, " item left");
          } else {
            left.removeAttribute('style');
          }
        });
      }

      var countChecked = document.querySelectorAll(classes.dataNotChecked).length;

      if (countChecked > 0) {
        left.style.visibility = 'visible';
        left.innerHTML = "".concat(countChecked, " item left");
      }
    }
  }, {
    key: "renerToDoList",
    value: function renerToDoList() {
      document.getElementById(classes.taskList).innerHTML = '';
      var keyLocalStorage = this.localStorageLengthSort('sort');

      for (var key in keyLocalStorage) {
        var keyId = keyLocalStorage[key];
        var value = localStorage[keyId];
        var itemsLocal = JSON.parse(value);
        var taskName = itemsLocal[0];
        var taskDescription = itemsLocal[1] ? "<p class=\"todo-description\" title=\"show more\">".concat(itemsLocal[1], "</p>") : '';
        var taskCheck = itemsLocal[2] === 'checked' ? 'checked' : '';
        var htmlTemplate = "\n        <p class=\"todo-title\">".concat(taskName, "</p>\n        ").concat(taskDescription, "\n        <span class=\"todo-remove\" title=\"remove task\"></span>\n      ");
        this.appendItemsToList({
          htmlTemplate: htmlTemplate,
          keyId: keyId,
          taskCheck: taskCheck
        });
      }

      this.removeTask();
      this.doneCheckOrChecked();
      this.showMore();
      this.countCheckItems();
    }
  }, {
    key: "appendItemsToList",
    value: function appendItemsToList(options) {
      var div = document.createElement('div');
      var attribute = {
        'data-id': options.keyId,
        style: 'position: relative',
        class: options.taskCheck
      };

      var _arr = Object.keys(attribute);

      for (var _i = 0; _i < _arr.length; _i++) {
        var key = _arr[_i];
        div.setAttribute(key, attribute[key]);
      }

      div.innerHTML = options.htmlTemplate;
      document.getElementById(classes.taskList).appendChild(div);
    }
  }, {
    key: "removeTask",
    value: function removeTask() {
      var items = document.querySelectorAll(classes.todoRemove);

      for (var i = 0; i < items.length; i++) {
        items[i].addEventListener('click', function () {
          var key = this.parentNode.getAttribute(classes.dataId);
          localStorage.removeItem(key);
          document.querySelector("[data-id=\"".concat(key, "\"]")).remove();
        });
      }
    }
  }, {
    key: "showMore",
    value: function showMore() {
      var getShowMore = document.querySelectorAll(classes.todoDescription);

      for (var i = 0; i < getShowMore.length; i++) {
        getShowMore[i].addEventListener('click', function () {
          this.classList.toggle(classes.more);
        });
      }

      ;
    }
  }, {
    key: "doneCheckOrChecked",
    value: function doneCheckOrChecked() {
      var checkDone = document.querySelectorAll(classes.todoTitle);

      for (var i = 0; i < checkDone.length; i++) {
        checkDone[i].addEventListener('click', function () {
          this.parentNode.classList.toggle(classes.checked);
          var key = this.parentNode.getAttribute(classes.dataId);
          var data = localStorage.getItem(key);
          var itemsLocal = JSON.parse(data);
          itemsLocal.pop() === 'unchecked' ? itemsLocal.push(classes.checked) : itemsLocal.push(classes.unchecked);
          localStorage.setItem(key, JSON.stringify(itemsLocal));
        });
      }
    }
  }, {
    key: "submitForm",
    value: function submitForm() {
      var _this = this;

      document.querySelector('form').addEventListener('submit', function (e) {
        e.preventDefault();

        var numberItems = _this.localStorageLengthSort();

        var taskID = numberItems === 0 ? 1 : numberItems + 1;
        var taskName = document.getElementById(classes.taskName).value;
        var taskNameTrim = taskName.replace(/(^\s+|\s+$)/g, '');
        document.getElementById(classes.taskName).value = taskNameTrim;
        var taskDescription = document.getElementById(classes.taskDescription).value;

        if (taskNameTrim) {
          document.getElementById(_this.formName).classList.remove(classes.novalid);
          var personItem = [taskName, taskDescription, classes.unchecked];
          localStorage.setItem(taskID, JSON.stringify(personItem));
          document.getElementById(_this.formName).reset();

          _this.renerToDoList();
        } else {
          document.getElementById(_this.formName).classList.add(classes.novalid);
        }
      });
    }
  }]);

  return PersonForm;
}();

;
new PersonForm(classes.taskForm).init();